package google;

import java.util.HashSet;
import java.util.Set;

public class SplitStringEqualWays {
    public static void main(String[] args) {
        String str = "icahdfbifaefihedbhcibeiigihiggdfcccdbhgeaedggddfdfceachbcehiaidfihagbdbhhciabadifadeceabdchhacfhgecaecifcbhhihcbfddeddheahcaiacgciiicgaficehbicidgchdgiiciidccgheechihbbihhfacabhgfbdgcefehfedcegdbggcgbdihdffdehdhchgcgaabebfdaihhieffbbeedgidcbiachedebgbahgafbbeighggcgdfbbhhdebiefcffacacaibfagbibcegdccahfbbehiiieddibdaedibaecbcgfehffaeccgfdfgbgffgdefhbgbafbhcffbefabeagbcacecbdaicahfehaigegcadfdibheiahcfbehdidbiciegbfefcgdfhibgggdddfifacbaaahggadbibdgfegeebeddechghdgiedbfcfciddhggifaiddbcdgibidhhgiagebeifdcacbigigbicghachcedaaicaiafgbdediibdggaggafahihbhddbhecbffhhhibbhecdbgiefcaiibeagbgafedeechbbifddhgcdcfafgieecfehdaedegdihdbibhficgiaeheecaegcbhcighfdiecficcgfheifbghdgbhfcbfdciffiiggaffbgfddcicgagggfgfaecfdheiafhhabebadhcgccafibaagheaibdigbbfggfiicfighefhfbdehfaiiiacchcfegiiecaaibecebgiefeedgccfcbhchhgieddbeaffgeeeaeifbhicdcfgbeadfeaifcbeahgfcceabagbaediegeaieaiabgdahgbeiebadhchieggcfbffcadebehcdcahaceiaaiaaigacefecdgiadabfiggiabahfeagdgcefahchceggiebaddbifichcibhhbgbadbgcdaegheefffadadbhbifidfdedabaagddbcbifahgbfeehbgbibgabcigcbehbedabfcfiefacdhbahagfaceadegicgbadhffecicgfcffbbiefbegbhddhehggghfegabigiihdfbbehiaaeihdeafcigacefgfigdcdfdhehdgebabfidbhcibiicggcechdaadfccbgfcgdcgedhdebhbceieffegbbhibegegfcicfaggdiihhibeaegeghieiehbebefdhcdbeiibiecddafhaaeaagidiiageccaaaadcebefhbedbicegeeiacfaibaihchgfdiabgchcfagfbefaccedbdihhieehghdgaaiedbdecciiffcdffiafiiidbhccaihbdhefhabgieegficbdfcbcbfebgghhibedbegeegigaddegfhdhbiahhiffbbcdffbfbbdibhgfbbfaheihceadiacchgbhfehhigacgdededdehaiddadihfbiiahhdbaefhhibgibcdedfeggiebdchdbbcehihahcdeddghgiaeghaebigbggfcbcdcgbccbgidaebccffeegicibgdahgdfechiahciadafcfbhdfcebagfbiadaheifbagbbgggcifecegfefibbibdegfhchiaegagegchaecffhgciaadhgiidhhbdcedeeecabaefhebaccdcagcbigedhbhceegdiecdgagdbbegceiiibiaciafffiadccaeabhecaidfbcbccihbgafghfebfeahacgbbhddchhafehaccgdgcegdbabcbiabihbihcfebeaffcggfcbiiaacfegdagfefbaeggheheceeeaiagfbiffdhgagegfcibbghdbfaicaiihcegcdabdcfefhgbagfaffahgeghgccacehbbbbbbhieehhhciehhbgabgdbgahfehidiibihgagfdfiggdafedciaegeeehabfhdghiaigabfdabhgihhbddaacgfedaddfdcheegbcfddifbebbiachcdfddehaehchbaiefcdfgeggeecfdbbgfhbcghddeaeeefaihbdeeeeefiggdgiabadfgiegefibagccaggacedegfggegdebgbgibdfghdidcihfcbcbbhhdbicciabfhiaigfcfcaficgbhidbdfhadgfehhcfdhefigafhfbdcddbbbecfiefecgcgiiifciddcdiidcicbcfgfhaegacahfcdfbcgbedgiehefbddibeefddgdhhiffhhgihhhdcbgehgiecgggecfehiiebdiibabfbchiaifgdddihghcfacgfgcefdeedibfccifaeideceifdhadehdabcfagfccgdgihacaghgdifahehgceebeeaifbhdaihibbifhgcbddabadfaaahifedhgfaaccbhhicccchdgffegaeaaaeaehgacihebecfgagaegbbidfddhagfcaifhgicdfbcaghcgbdhbcahebfdfifageeheggbgfahhifdciicchgeciabhgcgcbdfahfeibbiggaaiadhhedcifidiefihfbfegdbhieghbdacdddbcgbfebfccehccigbcbebdedgdgaahfhfddghfeabadfbgiidgfiifhiafhiedhdhagcfffgeidfhfhabcbcbdcdhbdcgdbefgchahcagfbgcbbeggadfeegccifdfiibcdgdbigbidgegaaccbgdgggcihfiacgiacigeehfdfcedfhhedhbdidegccbcgaadacihcgfcibheiaedefcfdbhcbbcbgcgcabgeiegafgghehcdedigfdhhfaceegbbdeheagheddhbceffhbhhfdhaddcdibbbgegcagdihhhbbifaeciabcggihifbachciaffgaddccdebechhbdceafigfegifggadgdbfgeaghabhidbcbhafhgcghfgbcihifdgdcebhegbffacbcheabidebgaddafihaiaheififgbfgcbicfiaaghbahdgadabfcbibahddechdhddadgaefefbgiahgcefhffehhhhgahihhdcbbcfhiggcbcfbegecfbbdbghbahceaffcbfehifagefcbcdaiaiaaeahiccbghchicaafcbdigbbfaeeaiddbhcdebcdhhbiddhffhhaededgcdaaigfccaddchgfichfeccafgfbadhbdffgcgfffcceefebehcedgfddegidhbfifbidcfffhbegfggfbfbhbfehgghfiigcbfccebddahbagdefidffchaibegigciiiegecchdadieggebchdgifghihfgefhdbegfghbecdfccdffefggbdaiagfbaaahfcicbahaabdiabahgcbcgicgcafccieebceeaihcefgaahegchedceifdbbhdbaheeefffbgedffchiaiaihaafggddebacdihabdfbccfgbhafhiggcabahggehghiceedbebfbceeefhfhaigadafcfgiiiadgeebaeeigibdafcgahhfeahhcghfadiadbbdidcgeghfhbfaicicgafhbeahccdiaidffeiahbgcgdccbhafhiciehgedbabifgciaieehhddefaaicahcfggdidcehfgigdccieahdhfbaefeiieecebbdchdhgcebfeceidcfdfidhhaigfhigadecagffegcabbgiffbfhbhiddchieheaibgagehbigdadhfabegfahagfdbccdggbbdiaeeaebccighcagafdgbfggdhhdchagddcighihefdgbeidiahebiiehdhccbcgdaccgfbahihbcadfgcbcabccdfccaddhdghbffgaebddhicebbefibaeigfagiiafhdbbiffagahiahhegeieeadcecfecbadecdbadigiffbgdehdcbedbiigfidcegfhahchabeidefbadcfbcgdhcfdeeffgdifigcfebgdiaccibbbehadcgieheghebahhiafbbdfehgaiiaadgcaabbdeaacbbfbgigbibeabbfcccgdghabeicdgiecahgahbbfecfbhaeifgdigeeaddggbiffidebfihaecaadcgafaaeehbghbehbgefaibcifbhhgbfcagcdgdgcgieigdahhgcaichaagidfadihhfadgfggfhcaahgggcdhibhcbfdbdecggbffhgdicgeicefiegaccaebccibidfcddibbfdfdebibghbhdccebidifheigabaecicebiffhedgfadcfbbdhhhdbicbchgbffcghdbahbhbegebiccdcdhhgbiciicaebbeccebcddfdefbhiifeecfhdhficdcdhcdaeidifabbaigcbhicaeibfafefchgchchagcagbahghcgaehficeabdieidbifacagcfeefdehiagecaahbahiggahfgageagdecihbedghcegdegfbbiiiigihhgiaaabdidiafdehhiebdcbggihbggiiiafhabaeiceigeebaccbdgdicffefefedghebcgheaidheidifbffaifdddhhccdfciaahaddcdbbdacgfagadiceebfbhihefbcdfhhggdedhiaecdgcebbiibadegccigdhbdeeebbfebgaedcfbfgidgbcfhigahacecdaacihhfcafhfbdadgdgbcggdfcacgbdeaebdafgihaeicaeeiagagcciehdbabchfafahecehbdfcachfabehaaiefdbbaehcigiehbghcdeedbcfcdfgechcgfiiadgdfcideebchcicgdidccgfiaaghhaibeiebfhabhdeeacehgghfaefbhaiefaahibdcagiabgegdeffcdbachdbgdhhbhgfeafdihidhgibihhficabhfeicihebaacbbhicbidiabgaaefgdibhgchdaghagfgiaibedeidbhafiiigibadiccabccecghehdfcfdfgbihiedicadeghbbcaheaiacbbadfcfhgegfihbbgfbhbiihhahfbhfffbihfbbiddifechbahidfiigaifcdfihgacgaebhgeeiigddcheeddcigadcdbibegfcafcdgfibeedicfffaicabggchbibebaidbafhhcgdbdiggigggedheiccbifedgeicfahfdfgeicdgfhedaeicgcfgehibbgaifdgfhaecghhfidhegeihahbghfecagdfcacgfahahhcdcifegfgfcfdbeafbhecfbihecehichheiggaiigeeaeeehagghhafhibibcgdbchiecfheehgcabbbeegibhfddhhcfeeafhchbgcchdfhgcihdggfibdbdidgighichfeiabfggfaggfiddidcahaaaagahdadgegcggicdhahggfbbacaeigfaacfhhebehihbfaedcdbebcagafagbhcfbfaidhgdhefhbieffbaifgabfeacdhbiaggageiiahgiiafhebbbdefebiicbiiggagdcddbcfaafabdfgbchffhdbbeacihehbihgbeihhfdiiedadhfgcccibchdhcefafdggbdhgcccfggbdbbicbbdacdcfccfcfddidcgfbibfighihfafaaghbgbdcacheifgbchagfdcihfhcfacefafhegiagbidcdbbdgcccbabdeaddagcciffgbcbgighbfbaaiahcbefaadffaggicicceedbhbaaeggbibdeegbcdhihhhdgdchdgdiffhfibdbcadecciabagdihgfhgcgadfacgdegafighfhffagghaiifhiiaibffhbhfgdafahiaabaeaaheifgegfffaegbbefacbhchbdifdgcgiacdbffhdbfchbicchcegebefgccedfccdfaegfdhhhefhchehfdfdhaafiifdgddhddadeghhebhidfebhigfbheahcbagcdbhegfadiachdgiahihcfidbceibccafihahdehadcdfcbgdghdbehediiffdbeiiidacfidiififcfcahbdbdfeiddedaedhihdbfabebfgheeghfeaefhgdahiigbcbaehdgedaiedffbehbdfigeiccgcgdifbihdiibgigediehiahfgdhebaghfbgcichfdbeagdbigifbeddihbbgdgaeecidbfgfgfeifbgbcbhdhahdeheaaacbhiceegefidhcdidhiaidhfcbcegccbiidbgafedfaffeiigefifaicagedffefehhahffgaghaeabiaffgdgcdchecebdiddcbgffdgbechbceifiicadbhedaicdcdfhffcaiigfcdeafifbefdgbdfbgdaeigbcfhgibigdcgghdgbhgcbdgfcgfigdifchffcaeahbgcgafhfeeidbdaigciifdgdcgaegdaieiidfhfaecffeacgahfagbbcgbfgghaahfheihdaheihgfiifgeabfbhhagbbaididgbicegdbahbgeffifhdfddeheifhaidcdihfchdaccigffiicdebdgdfdhcfdieghdibaifbddbgfcidaibaeageggfidacfacfgfaeiaifgabddgcfbhacbiaaabcfachgiicfedaeadecdhgabaadgdedfcgiddghaegacddagihbehehhhcfdehehiagcegehighicdbaddhceidihfaihicbdiedgfiecbiieibabbfdhabbcebeadhhbhiaabbcbfehcigcdgaffeifiaccgaichadfifeecdabihfhfhibibeigdiabeibiaacgcdiifefciegigibgbhbdedifccdacdgehhfcdbicgdhafhcfcbegechddieegfghidcgbihcgahficfbdbhcgfgfddaebehgcgfeefcaacbeebhccgcdabaefdichedeeghaidhdiafbaheadccbeigdeeagbbeiiaedifhfcdabfaeicbifagibedaciggcaeahedfbgdcdibbiegbecdcfegbfibgbghbfifdiiafecdhdgaaaibdabbccfdfiaiacgdhchhhahfhicfbaaebefdaegeadecahdcdbahdaibagbehggedhddchgabaigdidedfacdabeedgdfedbffdcidfdehfeffgccagchidaigihgcfcbddbbaccahfdhehdccdcedfeebgfcebgaiahcecddcehgebibieidfecheigecehbfbfefcifbcaeaihbgbgbddceggbihfhfdefhcgaiighbcacfgacagdcchdgaebabcgfehiaehhebbcfbbgcaaihbdhgfbedbiifidfhcdhbdagdihghbehghgidbadebaebachfaeghcadffibiheibeeagdgbceiebfciigighcibdfaeidgbfbiibffabefageeifacaggdgiggfbcagiffhcgiceecfidgfdiihcgahffdhibigafebdhddghagbecgfghcfigdibibiadghgeddichighbciibfbdeieifihcaiibbabghibihhchidcghiabgdehideciechcehaagbgbdchbbafhcdeigdedaafhiiebheehdffaggcgdhececaabbciidhcdbdgcheidbgddbebiieiifcahgfcbdbbachbhihbbiaagfbeheehbffhihiddgggcbciebhcgdaceiaihdgifbcdeciccbfbdcghfeceafhachihcgdaiigccciaegggfbcfdfafidedcdhaaeifhcgfhccbdfcabcigigigggegbdehcfdaiabhabbdbfbaadebgbbehgfbdaghhgiigigdfeecbdhhigdbeiicfefcfeddbeafdicciigcifhfafdbbeibcdghagefaeebgifibaadhaabfaefcegddcabgcbfcfgiehhfgdhdfefgfebiafeeehhadiafaehchccheibcdhiachcciccccdfefhhbiebbcegechcbhahfifbcihbeabicabgeibccgigdidfcedfcfeigiibcdigfecbahgcifgabacgdbcifbeegaeiafagecbcdgdgfigfhheeheefdhaefahbagiifghbicgfhhdaadagfcghdefbdggbaaddhaecdifddiahebaacieiefaahbfifbfgffhdagcihhifcfhdedcgbaacfdhhahhdahhbecceabaedhfaaabdbhfbahbdciiebhdhgcchccieafcgdgefdbfhgicbchiddacdigaddadidegfhggiiddfcfidhgicibdieghchfhecifhafhdefebeidceehddegcicfbdahdcdihbbdghiaecggbbfiegfeehbdcdceddiifgciacaehhdhigfdidbiaheifihffdbaegebhgiggghifhaegefhegbbdhhhidecdbafecgfabdhcabhcgghagfhffifafegdibaaebcegdgciaedfacdgghiihaifaidegcbehhfafgcidbaegcchabhfabdbhifbfhagiidbabiifibfhadeiiiicigigcbbdieafgdcbeiedfdecbaagbiaibhbaheeeceggecbfdieaegccgbfcfceifhhgeadcdhfaecbfbcgfhehdgccgdhhifbbeiedfbhfcfigifhggaffaibaadhbcheiahieaidbhheiecfebiebaicddggibaabeefceggacfdcggebfhghhdbaefdaeggcdbfeeheggigcffcidagehgificbfiededfbhadcdfcabdgcbfbfhiiaidbgbgdifgfdaieiaccafhdfgggbfhehadeddiddadfiigchhhiicfechidiadiffhieghbggfcfaaaacgdgdfbebhecbgdhfcbfcbdgaiaifedfccceacghhefcciahbhbgfdicdhhdeeiadfadfebcbgbhfdhhfifdafibbahacaeheeahaegfadeaigiedcegfdefhhehibhacdgcdceceaaihahfbgadfbaiaedcaedfcgefgaaccahiaebagehiccegfacdeebgdfhbiafechdfeceggdffecafbecfhggcacbebbfbhiieaeieghdcdefegiadhgfdedhaefdadiihichhiacgihfbdhgchgeibfcaacigdeahdcbbciibabbbiifgacfefebicidhbifagadgedaeifciahebcgiddfehgbeidiichaehbgcheifadeicgibbeabcgchgeifegaeagbdffagchaiaecabcfibgahihbicbdgfihedfahibfdicgefbagaghgaghdaiibcfiacdfiaiaecgcgbfdibbcdheccggcggdfghihhhghdbfhaacbfibgehgchgdaeibdiadbicchdcaicfddaciaacdbaadigfadcghcedbbeifaebdafgeechadhfbgagceebacceccffaceghacchgaiicfaaicgiibfdahccidaigcgdiehhcifchabchacfghachicgaifiigcccfcgibfhaihagfddhdgaidchic";
        String str2 = "ababa";
        long start = System.currentTimeMillis();
        int res = splitString(str2);
        long end = System.currentTimeMillis();
        System.out.println(res + " took "+ (end - start) + " ms");
    }

    public static int splitString(String str){
        int [] lc = new int[26];
        int [] rc = new int[26];
        int l = 0, r = 0, res = 0;
        for (char c : str.toCharArray()){
            if(rc[c-'a']++ == 0)
                r++;
        }
        for (char c : str.toCharArray()){
            if(lc[c-'a']++ == 0)
                l++;
            if(--rc[c-'a'] == 0)
                r--;
            if(l==r)
                res++;
        }

        return res;
    }

    public static int numOfWaysSplitForUniqueChars(String str){
        if(str.length() < 2)
            return 0;
        int count = 0;
        for(int i = 1; i < str.length(); i++){
            count += split(str.substring(0,i),str.substring(i));
        }
        return count;
    }

    private static int split(String substring, String substring1) {
        HashSet chars = new HashSet<Character>();
        HashSet chars1 = new HashSet<Character>();
        for(char c : substring.toCharArray()){
            chars.add(c);
        }
        for(char c : substring1.toCharArray()){
            chars1.add(c);
        }
        if(chars.size() == chars1.size())
            return 1;
        return 0;
    }

}
